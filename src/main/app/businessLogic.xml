<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" 
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd" >
    
    <batch:job name="syncOpportunityA2B" >
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            
            <batch:step name="getOpportunityInBStep" >

                <enricher   doc:name="enrich payload fields">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, Name, LastModifiedDate FROM Opportunity WHERE (Name = '#[payload.Name]')" doc:name="query opportunity from B"/>
                    <enrich source="#[payload == null ? null : payload.Id]" target="payload.Id"/>
                    <enrich source="#[payload == null ? null : payload.LastModifiedDate]" target="payload.LastModifiedDateB"/>

                </enricher>
            </batch:step>
            <batch:step name="enrichWithAccountInAWhenPush" accept-expression="('syncAccount' == '${account.sync.policy}') &amp;&amp; ('push' == '${trigger.policy}') &amp;&amp; (payload.AccountId != null)">
                <enricher source="#[payload]" target="#[payload.Account]" doc:name="Store in Account">
                    <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, Name,AccountNumber,Description,Industry,NumberOfEmployees,ParentId FROM Account WHERE Id = '#[payload.AccountId]'" doc:name="query account in A instance"/>
                </enricher>
            </batch:step>
            
            <batch:step name="findOrCreateAccountInBStep" accept-expression="('syncAccount' == '${account.sync.policy}') &amp;&amp; (payload.Account != null)">
                <enricher source="#[payload]" target="#[recordVars.accountInB]" doc:name="store in recordVars.accountInB">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, Name FROM Account WHERE Name = '#[payload.Account.Name]'" doc:name="query account in B instance"/>
                </enricher>
                <choice doc:name="does account in B need to be created?">
                    <when expression="#[recordVars.accountInB == null]">
                        <enricher source="#[payload[0].getId()]" target="#[payload.AccountId]" doc:name="update payload with new account ID">
                            <processor-chain doc:name="Processor Chain">
                                <dw:transform-message doc:name="Extract account A from payload">
                                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[{	
	Name				: payload.Account.Name,
	AccountNumber		: payload.Account.AccountNumber,
	Description			: payload.Account.Description,
	Industry			: payload.Account.Industry,
	NumberOfEmployees	: payload.Account.NumberOfEmployees as :number {class: "java.lang.Integer"} default 0,
	ParentId			: payload.Account.ParentId
}]]]></dw:set-payload>
                                </dw:transform-message>
                                <sfdc:create config-ref="SalesforceB" type="Account" doc:name="create account in B instance">
                                    <sfdc:objects ref="#[payload]"/>
                                </sfdc:create>
                            </processor-chain>
                        </enricher>
                    </when>
                    <otherwise>
                        <enricher source="#[payload]" target="#[payload.AccountId]" doc:name="update payload with existing account ID">
                            <expression-transformer expression="#[recordVars.accountInB.Id]" doc:name="get existing account ID in B"/>
                        </enricher>
                    </otherwise>
                </choice>


            </batch:step>
            <batch:step name="upsertOpportunityInBStep" accept-expression="(payload.LastModifiedDateB == null) || ((new org.joda.time.DateTime(payload.LastModifiedDate)).isAfter(new org.joda.time.DateTime(payload.LastModifiedDateB)))">

                <batch:commit size="200" doc:name="Batch Commit">
                    <dw:transform-message doc:name="Prepare for upsert">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {	
	(Id: 			$.Id) when $.Id != null,	
	AccountId: 		$.AccountId,		
	Name: 			$.Name,
	Description: 	$.Description,
	Amount: 		$.Amount as :number {class: "java.lang.Double"} default 0,
	CloseDate: 		$.CloseDate as :date {class: "java.util.Date"} default null,
	Type: 			$.type,
	StageName: 		$.StageName
}]]></dw:set-payload>
                    </dw:transform-message>
                    <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="Opportunity" doc:name="upsert opportunity in B">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger message="Upsert Salesforce B response: #[payload]" level="INFO" doc:name="log response"/>
                </batch:commit>
            </batch:step>

        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="unlock processing"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>
    </batch:job>
    
    <batch:job name="syncOpportunityB2A" >
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            
            <batch:step name="getOpportunityInAStep" >
                <enricher doc:name="enrich payload fields">
                    <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, Name, LastModifiedDate FROM Opportunity WHERE (Name = '#[payload['Name']]')" doc:name="query opportunity from A"/>
                    <enrich source="#[payload == null ? null : payload.Id]" target="#[payload.Id]"/>
                    <enrich source="#[payload == null ? null : payload.LastModifiedDate]" target="#[payload.LastModifiedDateA]"/>
                </enricher>

            </batch:step>
            <batch:step name="enrichWithAccountInBWhenPush" accept-expression="('syncAccount' == '${account.sync.policy}') &amp;&amp; ('push' == '${trigger.policy}') &amp;&amp; (payload.AccountId != null)">
                <enricher source="#[payload]" target="#[payload.Account]" doc:name="store in Account">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, Name,AccountNumber,Description,Industry,NumberOfEmployees,ParentId FROM Account WHERE Id = '#[payload.AccountId]'" doc:name="query account in B instance"/>
                </enricher>
            </batch:step>
            <batch:step name="findOrCreateAccountInAStep" accept-expression="('syncAccount' == '${account.sync.policy}') &amp;&amp; (payload.Account != null)">
                <enricher source="#[payload]" target="#[recordVars.accountInA]" doc:name="store in recordVars.accountInA">
                    <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, Name FROM Account WHERE Name = '#[payload.Account.Name]'" doc:name="query account in A instance"/>
                </enricher>
                <choice doc:name="does account in A need to be created?">
                    <when expression="#[recordVars.accountInA == null]">
                        <enricher source="#[payload[0].getId()]" target="#[payload.AccountId]" doc:name="update payload with new account ID">
                            <processor-chain doc:name="Processor Chain">
                                <dw:transform-message doc:name="Extract account B from payload">
                                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[{	
	Name				: payload.Account.Name,
	AccountNumber		: payload.Account.AccountNumber,
	Description			: payload.Account.Description,
	Industry			: payload.Account.Industry,
	NumberOfEmployees	: payload.Account.NumberOfEmployees as :number {class: "java.lang.Integer"} default 0,
	ParentId			: payload.Account.ParentId
}]]]></dw:set-payload>
                                </dw:transform-message>
                                <sfdc:create config-ref="SalesforceA" type="Account" doc:name="create account in A instance">
                                    <sfdc:objects ref="#[payload]"/>
                                </sfdc:create>
                            </processor-chain>
                        </enricher>
                    </when>
                    <otherwise>
                        <enricher source="#[payload]" target="#[payload.AccountId]" doc:name="update payload with existing account ID">
                            <expression-transformer expression="#[recordVars.accountInA.Id]" doc:name="get existing account ID in A"/>
                        </enricher>
                    </otherwise>
                </choice>
            </batch:step>

            <batch:step name="upsertOpportunityInAStep" accept-expression="(payload.LastModifiedDateA == null) || ((new org.joda.time.DateTime(payload.LastModifiedDate)).isAfter(new org.joda.time.DateTime(payload.LastModifiedDateA)))">

                <batch:commit size="200" doc:name="Batch Commit">
                    <dw:transform-message doc:name="Prepare for upsert">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {	
	(Id: 			$.Id) when $.Id != null,	
	AccountId: 		$.AccountId,		
	Name: 			$.Name,
	Description: 	$.Description,
	Amount: 		$.Amount as :number {class: "java.lang.Double"} default 0,
	CloseDate: 		$.CloseDate as :date {class: "java.util.Date"} default null,
	Type: 			$.type,
	StageName: 		$.StageName
}]]></dw:set-payload>
                    </dw:transform-message>
                    <sfdc:upsert config-ref="SalesforceA" externalIdFieldName="Id" type="Opportunity" doc:name="upsert opportunity in A">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger message="Upsert Salesforce A response: #[payload]" level="INFO" doc:name="log response"/>

                </batch:commit>
            </batch:step>

            
        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="unlock processing"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>
    </batch:job>

    
</mule>
