<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" 
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" 
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">

    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="${http.port}" doc:name="HTTP Listener Configuration"/>
    <flow name="triggerPushFlow"  initialState="started">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/" doc:name="HTTP"/>

        <choice doc:name="Trigger Policy">
            <when expression="#['push' == '${trigger.policy}']">
                <expression-component doc:name="lock processing to avoid two syncs occurring at the same time"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
                <set-variable variableName="sourceSystem" value="#[message.inboundProperties.'http.query.params'.source]" doc:name="set 'sourceSystem' variable"/>
                <dw:transform-message doc:name="Transform XML to Opportunity">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---

payload.Envelope.Body.notifications.Notification.*sObject
]]></dw:set-payload>
                </dw:transform-message>


                <choice doc:name="Trigger target system destination">
                    <when expression="#[(flowVars.sourceSystem == 'A') &amp;&amp; (payload[0].LastModifiedById != '${sfdc.a.integration.user.id}')]">
                        <batch:execute name="syncOpportunityA2B" doc:name="trigger batch execution for syncOpportunityA2B"/>
                    </when>
                    <when expression="#[(flowVars.sourceSystem == 'B') &amp;&amp; (payload[0].LastModifiedById != '${sfdc.b.integration.user.id}')]">
                        <batch:execute name="syncOpportunityB2A" doc:name="trigger batch execution for syncOpportunityB2A"/>
                    </when>
                    <otherwise>
                        <expression-component doc:name="unlock processing"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
                        <logger message="'sourceSystem' variable not found or integration user detected - message ignored" level="INFO" doc:name="Logger"/>
                    </otherwise>
                </choice>
            </when>

            <otherwise>
                <logger message="Trigger policy has been set to POLL. Skipping this message" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <set-payload value="&lt;soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:out='http://soap.sforce.com/2005/09/outbound'&gt;&lt;soapenv:Header/&gt;&lt;soapenv:Body&gt;&lt;out:notificationsResponse&gt;&lt;out:Ack&gt;true&lt;/out:Ack&gt;&lt;/out:notificationsResponse&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;" doc:name="Set response body"/>

        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>

	<!-- This is the endponits file. In this file you should declare all your inbound and outbound endpoints, in order to control the access to your integration -->

    <flow name="triggerSyncFromAFlow"  processingStrategy="synchronous" initialState="started">
		<poll doc:name="Poll">
			<fixed-frequency-scheduler frequency="${poll.frequencyMillis}" startDelay="10000" />
			<watermark variable="lastQueryDateA" default-expression="${watermark.default.expression}" selector="MAX" selector-expression="#[payload.LastModifiedDate]" />
            <processor-chain doc:name="Processor Chain">
                <sfdc:query config-ref="SalesforceA" query="dsql:SELECT Account.Id,Account.Name,Account.AccountNumber,Account.Description,Account.Industry,Account.NumberOfEmployees,Account.ParentId,Amount,CloseDate,LastModifiedById,LastModifiedDate,Name,StageName, Description FROM Opportunity WHERE (Amount &gt; 5000 AND LastModifiedDate &gt; #[flowVars.lastQueryDateA]) AND (LastModifiedById &lt;&gt; '${sfdc.a.integration.user.id}') ORDER BY LastModifiedDate ASC LIMIT 200" doc:name="fetch opportunities from A"/>

            </processor-chain>

		</poll>
        <choice doc:name="Trigger Policy">
            <when expression="#['poll' == '${trigger.policy}']">
                <expression-component doc:name="lock processing to avoid two syncs occurring at the same time"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
                <batch:execute name="syncOpportunityA2B" doc:name="trigger syncOpportunityA2B execution"/>

            </when>
            <otherwise>
                <logger message="Trigger policy has been set to PUSH. Skipping this message" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
		<exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>        
    </flow>
    
	<flow name="triggerSyncFromBFlow"  processingStrategy="synchronous" initialState="started">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="${poll.frequencyMillis}" startDelay="10000"/>
            <watermark variable="lastQueryDateB" default-expression="${watermark.default.expression}" selector="MAX" selector-expression="#[payload.LastModifiedDate]"/>
            <processor-chain doc:name="Processor Chain">
                <sfdc:query config-ref="SalesforceB" query="dsql:SELECT Account.Id,Account.Name,Account.AccountNumber,Account.Description,Account.Industry,Account.NumberOfEmployees,Account.ParentId,Amount,CloseDate,LastModifiedById,LastModifiedDate,Name,StageName, Description FROM Opportunity WHERE (Amount &gt; 5000 AND LastModifiedDate &gt; #[flowVars.lastQueryDateB]) AND (LastModifiedById &lt;&gt; '${sfdc.b.integration.user.id}') ORDER BY LastModifiedDate ASC LIMIT 200" doc:name="fetch opportunities from B"/>
            </processor-chain>
        </poll>

        <choice doc:name="Trigger Policy">
            <when expression="#['poll' == '${trigger.policy}']">
                <expression-component doc:name="lock processing to avoid two syncs occurring at the same time"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
                <batch:execute name="syncOpportunityB2A" doc:name="trigger syncOpportunityB2A execution"/>
            </when>
            <otherwise>
                <logger message="Trigger policy has been set to PUSH. Skipping this message" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>

</mule>
